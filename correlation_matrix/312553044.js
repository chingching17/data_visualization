(function (d3$1) {
  'use strict';

  d3.select("body").append("div").attr("class", "tip").style("display", "none");

  var data_vis = [];

  var cols =  ["Length","Diameter","Height","Whole_weight","Shucked_weight","Viscera_weight","Shell_weight","Rings"];
  var cols_forcsv =  ["Length","Diameter","Height","Whole_weight","Shucked_weight","Viscera_weight","Shell_weight","Rings"];

  var obj;
  var weird_cols = ["M","0.455","0.365","0.095","0.514","0.2245","0.101","0.15","15"];
  d3$1.csv('http://vis.lab.djosix.com:2023/data/abalone.data').then(data=> {
    data.forEach(function(d, index) {
  		obj = {"index": index+1};
      console.log(d[0]);
      obj["Sex"] = d["M"];
                 // "Length":0,"Diameter":0,"Height":0,"Whole_weight":0,"Shucked_weight":0,"Viscera_weight":0,"Shell_weight":0,"Rings":0};
      for (var i = 1; i <= 8; i++){
        var tmp = obj[cols_forcsv[i-1]];
        // console.log(tmp);
        obj[cols_forcsv[i-1]] = Number(d[weird_cols[i]]);
        // console.log(obj[cols_forcsv[i-1]]);
      }
  		data_vis.push({...obj});
    });
     obj["index"] = Number(0);
    obj["Sex"] = "M";
    obj["Length"] = Number(0.455);
    obj["Diameter"] = Number(0.365);
    obj["Height"] = Number(0.095);
    obj["Whole_weight"] = Number(0.514);
    obj["Shucked_weight"] = Number(0.2245);
    obj["Viscera_weight"] = Number(0.101);
    obj["Rings"] = Number(15);
    obj["Shell_weight"] = Number(0.15);
    data_vis.push({...obj});
    console.log(data_vis[0]);
    console.log(data_vis[4176]);
    
    render_b(data_vis, "#div1", "M");
    render_b(data_vis, "#div2", "F");
    render_b(data_vis, "#div3", "I");
    // render(data_vis);
  });
  function render_b(raw_data, id, class_name){
    	var filteredData = raw_data.filter(function(d) {
        return d["Sex"] == class_name;
      });
    console.log(filteredData);
      // List of all variables and number of them
    	var data_list = jz.arr.correlationMatrix(filteredData, cols);
    	const data = data_list.map(dataObj => ({
          "x": dataObj["column_x"],
          "y": dataObj["column_y"],
          "value": dataObj["correlation"]
      }));
    	console.log(data);
      var margin = {top: 20, right: 20, bottom: 20, left: 20},
      width = 200 - margin.left - margin.right,
      height = 200 - margin.top - margin.bottom;
      
    	var svg = d3.select(id).append("svg")
        .attr("width", "80%")
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
    	console.log(data);
      var domain = d3.set(data.map(function(d) { return d.x })).values();
      var num = Math.sqrt(data.length);

      // Create a color scale
      var color_dict = {"M": ["#B22222", "#fff", "#000080"], 
                   "F": ['blue', 'green', 'red'], 
                   "I": ["red", "green", "orange"] 
                   };
      var color = d3.scaleLinear()
        .domain([-1, 0, 1])
        .range(color_dict[class_name]);

      // Create a size scale for bubbles on top right. Watch out: must be a rootscale!
      var size = d3.scaleSqrt()
        .domain([0, 1])
        .range([0, 9]);

      // X scale
      var x = d3.scalePoint()
        .range([0, width])
        .domain(domain);

      // Y scale
      var y = d3.scalePoint()
        .range([0, height])
        .domain(domain);

      // Create one 'g' element for each cell of the correlogram
      var cor = svg.selectAll(".cor")
        .data(data)
        .enter()
        .append("g")
          .attr("class", "cor")
          .attr("transform", function(d) {
            return "translate(" + x(d.x) + "," + y(d.y) + ")";
          });

      // Low left part + Diagonal: Add the text with specific color
      cor
        .filter(function(d){
          var ypos = domain.indexOf(d.y);
          var xpos = domain.indexOf(d.x);
          return xpos <= ypos;
        })
        .append("text")
          .attr("y", 5)
          .text(function(d) {
            if (d.x === d.y) {
              return d.x;
            } else {
              return d.value.toFixed(2);
            }
          })
          .style("font-size", 11)
          .style("text-align", "center")
          .style("fill", function(d){
            if (d.x === d.y) {
              return "#000";
            } else {
              return color(d.value);
            }
          });
  		
    var tooltip = d3.select("#info_box").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

      // Up right part: add circles
      cor
        .filter(function(d){
          var ypos = domain.indexOf(d.y);
          var xpos = domain.indexOf(d.x);
          return xpos > ypos;
        })
        .append("circle")
          .attr("r", function(d){ return size(Math.abs(d.value)) })
          .style("fill", function(d){
            if (d.x === d.y) {
              return "#000";
            } else {
              return color(d.value);
            }
          })
          .style("opacity", 0.8)
          .on("mouseover", function(d) {
          // 在 mouseover 時顯示 tooltip
          tooltip.transition()
              .duration(10)
              .style("opacity", .9);
          tooltip.html(class_name + ": " + d.value.toFixed(2))
              .style("left", (d3.event.pageX) + "px")
              .style("top", (d3.event.pageY - 28) + "px");

          // 在 mouseover 時改變邊框樣式
          d3.select(this)
              .style("stroke", "black")  // 修改邊框顏色，這裡使用紅色作為示例
              .style("stroke-width", 2);  // 可選擇設置邊框的寬度
      })
          .on("mouseout", function(){d3.select(this).style("stroke", "none");});
    
  }

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,