(function (d3$1) {
  'use strict';

  d3.select("#first-axis").on("change", rerender);
  d3.select("#second-axis").on("change", rerender);
  d3.select("#third-axis").on("change", rerender);
  d3.select("#forth-axis").on("change", rerender);
  const legend = d3$1.select('#legend').append('g')
    						.attr('transform',`translate(-5, 10)`);
  legend
  		.append('circle')
    	.attr('cx', 10)
    	.attr('cy', 10)
    	.attr('class', 'Iris-setosa')
    	.attr('r', 5)
  		.style('fill', 'blue');
  legend
  		.append('text')
  		.attr('class', 'legend-text')
  		.attr('x', 20)
    	.attr('y', 15)
    	.text('Iris-setosa');

  legend
  		.append('circle')
    	.attr('cx', 10)
    	.attr('cy', 40)
    	.attr('class', 'Iris-versicolor')
    	.attr('r', 5)
  		.style('fill', 'orange');
  legend
  		.append('text')
  		.attr('class', 'legend-text')
  		.attr('x', 20)
    	.attr('y', 45)
    	.text('Iris-versicolor');

  legend
  		.append('circle')
    	.attr('cx', 10)
    	.attr('cy', 70)
    	.attr('class', 'Iris-virginica')
    	.attr('r', 5)
  		.style('fill', 'red');
  legend
  		.append('text')
  		.attr('class', 'legend-text')
  		.attr('x', 20)
    	.attr('y', 75)
    	.text('Iris-virginica');


  const render = data => {
    
    d3$1.select('svg').selectAll("*").remove();
    const svg = d3$1.select('svg');

    const width = +svg.attr('width');
    const height = +svg.attr('height');

    svg.style('background-color',"white");
    
    const margin = {top: 10, right: 20, bottom: 60, left: 10};
    
    const first_axis = d3.select("#first-axis").property("value");
    const second_axis = d3.select("#second-axis").property("value");
    const third_axis = d3.select("#third-axis").property("value");
    const forth_axis = d3.select("#forth-axis").property("value");
    var dimensions = [first_axis, second_axis, third_axis, forth_axis];
    
    const g = svg.append('g')
    						.attr('transform',`translate( ${margin.left}, ${margin.top})`);
    
    // For each dimension, I build a linear scale. I store all in a y object
    var y = {};
    for (var i in dimensions) {
      name = dimensions[i];
      y[name] = d3.scaleLinear()
        .domain( d3.extent(data, function(d) { return +d[name]; }) )
        .range([height, 0]);
    }

    // Build the X scale -> it find the best position for each Y axis
    var x = d3.scalePoint()
      .range([0, width])
      .padding(1)
      .domain(dimensions);

    // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.
    function path(d) {
        return d3.line()(dimensions.map(function(p) { return [x(p), y[p](d[p])]; }));
    }
    
    function color(d){
      	var color_dict = {"Iris-setosa": "blue",
  												"Iris-versicolor": "orange",
                          "Iris-virginica": "red",
                         };
    		return color_dict[d['class']];
    }

    // Draw the lines
    g
      .selectAll("myPath")
      .data(data)
      .enter().append("path")
      .attr("d",  path)
      .style("fill", "none")
      .style("stroke", color)
      .style("opacity", 0.3);

    // Draw the axis:
    g.selectAll("myAxis")
      // For each dimension of the dataset I add a 'g' element:
      .data(dimensions).enter()
      .append("g")
      // I translate this element to its right position on the x axis
      .attr("transform", function(d) { return "translate(" + x(d) + ")"; })
      // And I build the axis with the call function
      .each(function(d) { d3.select(this).call(d3.axisLeft().scale(y[d])); })
      // Add axis title
      .append("text")
        .style("text-anchor", "middle")
        .attr("y", -9)
        .text(function(d) { return d; })
        .style("fill", "black");
    
  g.attr('transform', 'scale(0.4)')
    	.attr('transform',`translate(-5, 30)`);

  };


  function rerender(){
      d3$1.csv('http://vis.lab.djosix.com:2023/data/iris.csv').then(data=> {
        data.forEach(d=> {
          // sepal length,sepal width,petal length,petal width,class
            d['sepal length'] = +d['sepal length'];
            d['sepal width'] = +d['sepal width'];
            d['petal length'] = +d['petal length'];
            d['petal width'] = +d['petal width'];
        });

        data = data.filter( d => {
          if(d['sepal length'] == ""){
             return false;
          }
          else {
            return true;
          }
        });
        render(data);
    	});
  }

  rerender();

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,